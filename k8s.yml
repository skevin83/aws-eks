apiVersion: v1
kind: Namespace
metadata:
  name: java-app
  labels:
    name: java-app

---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: java-app
  name: demo-java-app-a
  labels:
    app: demo-java-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-java-app
  template:
    metadata:
      labels:
        app: demo-java-app
    spec:
      containers:
      - name: demo-java-app
        image: 619587246008.dkr.ecr.ap-southeast-1.amazonaws.com/demo-helloworld-java-app:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          failureThreshold: 3
          periodSeconds: 60
          terminationGracePeriodSeconds: 60
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          failureThreshold: 30
          periodSeconds: 10
        resources:
          requests:
            memory: "256Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "1"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: Group
                operator: In
                values:
                - managed_group_1
      
---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: java-app
  name: demo-java-app-b
  labels:
    app: demo-java-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-java-app
  template:
    metadata:
      labels:
        app: demo-java-app
    spec:
      containers:
      - name: demo-java-app
        image: 619587246008.dkr.ecr.ap-southeast-1.amazonaws.com/demo-helloworld-java-app:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          failureThreshold: 3
          periodSeconds: 60
          terminationGracePeriodSeconds: 60
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          failureThreshold: 30
          periodSeconds: 10
        resources:
          requests:
            memory: "256Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "1"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: Group
                operator: In
                values:
                - managed_group_2

---

apiVersion: v1
kind: Service
metadata:
  name: demo-java-app-service
  namespace: java-app
spec:
  selector:
    app: demo-java-app 
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
    nodePort: 31110

---

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: demo-java-app-pdb
  namespace: java-app
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: demo-java-app

---

apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: demo-java-app-hpa-a
  namespace: java-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: demo-java-app-a
  minReplicas: 1
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50

---

apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: demo-java-app-hpa-b
  namespace: java-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: demo-java-app-b
  minReplicas: 1
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: demo-java-app-ingress
  namespace: java-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - k8s.kevinsee.com
    secretName: k8s-tls
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service: 
            name: demo-java-app-service
            port:
              number: 80
